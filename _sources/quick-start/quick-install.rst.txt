Cloning ChASE source code
--------------------------

ChASE is an open source project and it is available on `GitHub
<https://github.com/>`_. In order to download the source code of ChASE
one needs to have the `git <http://git-scm.com/>`_ utility installed. 
To clone a local copy of the ChASE repository execute the command::

    git clone https://github.com/SimLabQuantumMaterials/ChASE.git


.. _build-label:

Building the ChASE library
---------------------------

On a Linux system with MPI and CMake installed in the standard
locations, ChASE can be build by executing in order the
following commands (after having cloned the repository)::

    cd ChASE/
    mkdir build
    cd build/
    cmake ..
    make

CMake will auto-detect the dependencies and select the default
installed modules. In order to select a specific module installation,
one can manually specify several build options,
especially when multiple versions of libraries or several different
compilers are available on the system. For instance, any ``C++``, ``C``, or
``Fortran`` compiler can be selected by setting the
``CMAKE_CXX_COMPILER``, ``CMAKE_C_COMPILER``, and
``CMAKE_Fortran_COMPILER`` variables, respectively. The following
provide an illustration of such setting. ::

    -D CMAKE_CXX_COMPILER=/usr/bin/g++ \
    -D CMAKE_C_COMPILER=/usr/bin/gcc   \
    -D CMAKE_Fortran_COMPILER=/usr/bin/gfortran

Analogously, it may be necessary to manually specify the paths to the
MPI implementation by, for example, setting the following variables. ::

    -D MPI_CXX_COMPILER=/usr/bin/mpicxx \
    -D MPI_C_COMPILER=/usr/bin/mpicc \
    -D MPI_Fortran_COMPILER=/usr/bin/mpif90

For instance, installing ChASE on an Apple computer with gcc and
Accelerate, one could execute the following command::

    cmake -D CMAKE_CXX_COMPILER=g++ -D CMAKE_C_COMPILER=gcc -D CMAKE_Fortran_COMPILER=gfortran ..


Simple Driver
--------------

For a quick test and usage of the library, we provide a ready-to-use
simple driver.  In order to build the simple driver together with ChASE
the sequence of building commands is slightly modified as below::

  cd ChASE/
  mkdir build
  cd build/
  cmake .. -DBUILD_SIMPLEDRIVER=ON
  make

One can call the simple driver without any argument. In this case a
Clement matrix is generated and default values are used::
  
  ./simple_driver/simple_driver

One could also specify a subset or all arguments. The minimal
arguments that need to be provided are the input matrix and the size
of such matrix::

  ./simple_driver/simple_driver --n 1001 --input $HOME/YourOwnFolder/YourMatrixToSolve.bin
  
To run the `simple_driver` with MPI, start the command with the mpi launcher of your choice, e.g. `mpirun` or `srun`.

All additional arguments can be listed with -h::

  ./simple_driver/simple_driver -h

For sake of completeness we provide a complete list below.

.. table::

  ========================= =================================================================
  Parameter (default value) Description
  ========================= =================================================================
  -h [ --help ]             Shows the full list of parameters
  --n arg (=1001)           Size of the Input Matrix
  --double arg (=1)         Are matrix entries of type double, false indicates type single
  --complex arg (=1)        Is matrix complex valued, false indicates a real matrix 
  --nev arg (=100)          Wanted Number of Eigenpairs
  --nex arg (=25)           Extra Search Dimensions
  --deg arg (=20)           Initial filtering degree
  --bgn arg (=2)            Start index of matrix sequence (if any) 
  --end arg (=2)            End index of matrix sequence (if any)
  --tol arg (=1e-10)        Minimum tolerance required to declare eigenpairs converged
  --input arg               Path to the input matrix/matrices
  --output arg (=eig.txt)   Path to the write the eigenvalues
  --mode arg (=R)           Valid values are ``R`` (Random) or ``A`` (Approximate)
  --opt arg (=N)            Valid values are Optimi ``S`` e, or do ``N`` ot optimise degree
  --path_eigp arg           Path to approximate solutions, only required when 
                            mode is ``A`` pproximate, otherwise not used
  --perturb arg (=0)        Perturbation of eigenvalues used for
                            second run. Only used with single matrix
			    to test effectiveness of ``A`` pproximate mode
  ========================= =================================================================
